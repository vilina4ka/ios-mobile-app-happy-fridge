//
//  StatisticsViewController.swift
//  HappyFridge
//
//  Created by –í–∏–ª–∏–Ω–∞ –û–ª—å—Ö–æ–≤—Å–∫–∞—è on 29.04.2025.
//

import UIKit
import Combine
import DGCharts // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

final class StatisticsViewController: UIViewController {

    // MARK: - Properties
    private let viewModel = StatisticsViewModel()
    private var cancellables = Set<AnyCancellable>()

    // MARK: - UI Elements
    private lazy var scrollView: UIScrollView = { let s=UIScrollView();s.translatesAutoresizingMaskIntoConstraints=false;return s }()
    private lazy var contentView: UIView = { let v=UIView();v.translatesAutoresizingMaskIntoConstraints=false;return v }()

    private lazy var eatenOnTimeTitleLabel: UILabel = { let l=UILabel();l.translatesAutoresizingMaskIntoConstraints=false;l.text="–°—ä–µ–¥–µ–Ω–æ –≤ —Å—Ä–æ–∫:";l.font = .systemFont(ofSize: 18);l.textColor = .secondaryLabel;return l }()
    private lazy var eatenOnTimePercentageLabel: UILabel = { let l=UILabel();l.translatesAutoresizingMaskIntoConstraints=false;l.font = .systemFont(ofSize: 60, weight: .bold);l.textColor=UIColor(red:138/255,green:185/255,blue:68/255,alpha:1.0);l.text="0%";return l }()
    private lazy var expiredTitleLabel: UILabel = { let l=UILabel();l.translatesAutoresizingMaskIntoConstraints=false;l.text="–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ —É –≤–∞—Å –ø—Ä–æ–ø–∞–¥–∞–ª–∏:";l.font = .systemFont(ofSize: 18);l.textColor = .secondaryLabel;return l }()

    private lazy var pieChartView: PieChartView = { // –¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ PieChartView
        let chartView = PieChartView(); chartView.translatesAutoresizingMaskIntoConstraints = false
        chartView.drawEntryLabelsEnabled = true // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö
        chartView.drawHoleEnabled = true; chartView.holeColor = .systemBackground
        chartView.holeRadiusPercent = 0.5; chartView.transparentCircleRadiusPercent = 0.53
        chartView.drawSlicesUnderHoleEnabled = false; chartView.usePercentValuesEnabled = true
        chartView.legend.enabled = false; chartView.chartDescription.enabled = false
        chartView.rotationEnabled = false; chartView.setExtraOffsets(left: 20, top: 0, right: 20, bottom: 0) // –£–≤–µ–ª–∏—á–∏–ª –±–æ–∫–æ–≤—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤—ã–Ω–æ—Å–Ω—ã—Ö –ª–∏–Ω–∏–π
        chartView.entryLabelColor = .black // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        chartView.entryLabelFont = .systemFont(ofSize: 14, weight: .medium) // –®—Ä–∏—Ñ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        return chartView
    }()

    private lazy var legendStackView: UIStackView = { let s=UIStackView();s.translatesAutoresizingMaskIntoConstraints=false;s.axis = .vertical;s.spacing=8;s.alignment = .leading;return s }()
    private lazy var noDataLabel: UILabel = { let l=UILabel();l.translatesAutoresizingMaskIntoConstraints=false;l.text="–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö.";l.font = .systemFont(ofSize:16);l.textColor = .tertiaryLabel;l.textAlignment = .center;l.isHidden=true;return l }()

    // MARK: - Lifecycle Methods
    override func viewDidLoad() { super.viewDidLoad();view.backgroundColor = .systemBackground;title = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞";setupUI();setupBindings();print("üü¢ StatisticsVC: viewDidLoad.");viewModel.loadStatistics() }
    override func viewWillAppear(_ animated: Bool) { super.viewWillAppear(animated);self.tabBarController?.tabBar.isHidden=true }
    override func viewWillDisappear(_ animated: Bool) { super.viewWillDisappear(animated);if isMovingFromParent{self.tabBarController?.tabBar.isHidden=false} }

    // MARK: - UI Setup
    private func setupUI() {
        view.addSubview(scrollView); scrollView.addSubview(contentView)
        contentView.addSubview(eatenOnTimeTitleLabel); contentView.addSubview(eatenOnTimePercentageLabel)
        contentView.addSubview(expiredTitleLabel); contentView.addSubview(pieChartView)
        contentView.addSubview(legendStackView); contentView.addSubview(noDataLabel)
        let padding:CGFloat=20; let chartSize:CGFloat=250
        NSLayoutConstraint.activate([
            scrollView.topAnchor.constraint(equalTo:view.safeAreaLayoutGuide.topAnchor), scrollView.leadingAnchor.constraint(equalTo:view.leadingAnchor), scrollView.trailingAnchor.constraint(equalTo:view.trailingAnchor), scrollView.bottomAnchor.constraint(equalTo:view.bottomAnchor),
            contentView.topAnchor.constraint(equalTo:scrollView.contentLayoutGuide.topAnchor), contentView.leadingAnchor.constraint(equalTo:scrollView.contentLayoutGuide.leadingAnchor), contentView.trailingAnchor.constraint(equalTo:scrollView.contentLayoutGuide.trailingAnchor), contentView.bottomAnchor.constraint(equalTo:scrollView.contentLayoutGuide.bottomAnchor), contentView.widthAnchor.constraint(equalTo:scrollView.frameLayoutGuide.widthAnchor),
            eatenOnTimeTitleLabel.topAnchor.constraint(equalTo:contentView.topAnchor,constant:padding*1.5), eatenOnTimeTitleLabel.centerXAnchor.constraint(equalTo:contentView.centerXAnchor),
            eatenOnTimePercentageLabel.topAnchor.constraint(equalTo:eatenOnTimeTitleLabel.bottomAnchor,constant:8), eatenOnTimePercentageLabel.centerXAnchor.constraint(equalTo:contentView.centerXAnchor),
            expiredTitleLabel.topAnchor.constraint(equalTo:eatenOnTimePercentageLabel.bottomAnchor,constant:padding*2), expiredTitleLabel.centerXAnchor.constraint(equalTo:contentView.centerXAnchor),
            pieChartView.topAnchor.constraint(equalTo:expiredTitleLabel.bottomAnchor,constant:padding), pieChartView.centerXAnchor.constraint(equalTo:contentView.centerXAnchor), pieChartView.widthAnchor.constraint(equalToConstant:chartSize), pieChartView.heightAnchor.constraint(equalToConstant:chartSize),
            legendStackView.topAnchor.constraint(equalTo:pieChartView.bottomAnchor,constant:padding*1.5), legendStackView.leadingAnchor.constraint(equalTo:contentView.leadingAnchor,constant:padding*2), legendStackView.trailingAnchor.constraint(lessThanOrEqualTo:contentView.trailingAnchor,constant:-padding), legendStackView.bottomAnchor.constraint(equalTo:contentView.bottomAnchor,constant:-padding),
            noDataLabel.topAnchor.constraint(equalTo:expiredTitleLabel.bottomAnchor,constant:padding), noDataLabel.leadingAnchor.constraint(equalTo:contentView.leadingAnchor,constant:padding), noDataLabel.trailingAnchor.constraint(equalTo:contentView.trailingAnchor,constant:-padding), noDataLabel.bottomAnchor.constraint(equalTo:contentView.bottomAnchor,constant:-padding)
        ]); print("üü¢ StatisticsVC: setupUI –∑–∞–≤–µ—Ä—à–µ–Ω.")
    }

    // MARK: - Bindings
    private func setupBindings() {
        viewModel.$usedInTimePercentageString.receive(on:DispatchQueue.main).assign(to:\.text!,on:eatenOnTimePercentageLabel).store(in:&cancellables)
        viewModel.$expiredChartData.receive(on:DispatchQueue.main).sink{[weak self] chartData in print("üîÑ StatisticsVC: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã/–ª–µ–≥–µ–Ω–¥—ã. –°–µ–≥–º–µ–Ω—Ç–æ–≤: \(chartData.count)");self?.updatePieChart(with:chartData);self?.updateLegend(with:chartData)}.store(in:&cancellables)
        viewModel.$noExpiredData.receive(on:DispatchQueue.main).sink{[weak self] noData in print("üîÑ StatisticsVC: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∑–∞–≥–ª—É—à–∫–∏. noData = \(noData)");self?.pieChartView.isHidden=noData;self?.legendStackView.isHidden=noData;self?.noDataLabel.isHidden = !noData}.store(in:&cancellables)
        print("üü¢ StatisticsVC: setupBindings –∑–∞–≤–µ—Ä—à–µ–Ω.")
    }

    // MARK: - UI Update Helpers
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ViewModel.
    private func updatePieChart(with data: [ChartDataEntry]) {
        print("‚û°Ô∏è StatisticsVC: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Pie Chart View...")

        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏, –Ω–æ –ë–ï–ó label ---
        let entries = data.map { PieChartDataEntry(value: $0.percentage, label: nil) } // Label —É–±–∏—Ä–∞–µ–º –æ—Ç—Å—é–¥–∞
        // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        let dataSet = PieChartDataSet(entries: entries, label: "")
        dataSet.colors = data.map { $0.color }
        dataSet.sliceSpace = 2
        dataSet.selectionShift = 5

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π (–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤) –ù–ê –¥–∏–∞–≥—Ä–∞–º–º–µ
        dataSet.drawValuesEnabled = true // –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        dataSet.valueFont = .systemFont(ofSize: 14, weight: .medium) // –®—Ä–∏—Ñ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        dataSet.valueTextColor = .black // –¶–≤–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        // –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        let formatter = NumberFormatter()
        formatter.numberStyle = .percent // –°—Ç–∏–ª—å –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        formatter.maximumFractionDigits = 0 // –¶–µ–ª—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        formatter.multiplier = 1.0 // –í–∞–∂–Ω–æ! –ó–Ω–∞—á–µ–Ω–∏—è –≤ dataSet –£–ñ–ï —è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ (0-100)
        dataSet.valueFormatter = DefaultValueFormatter(formatter: formatter)
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–Ω–æ—Å–Ω—ã—Ö –ª–∏–Ω–∏–π –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π
        dataSet.valueLinePart1OffsetPercentage = 0.8; dataSet.valueLinePart1Length = 0.4
        dataSet.valueLinePart2Length = 0.4; dataSet.valueLineColor = .systemGray4 // –¶–≤–µ—Ç –ª–∏–Ω–∏–∏
        dataSet.yValuePosition = .outsideSlice // –ó–Ω–∞—á–µ–Ω–∏—è —Å–Ω–∞—Ä—É–∂–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤

        let chartData = PieChartData(dataSet: dataSet)
        pieChartView.data = chartData
        pieChartView.notifyDataSetChanged()
        pieChartView.animate(xAxisDuration: 0.7, yAxisDuration: 0.7, easingOption: .easeOutQuad)
    }

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–µ–≥–µ–Ω–¥—É –ø–æ–¥ –¥–∏–∞–≥—Ä–∞–º–º–æ–π.
    private func updateLegend(with data: [ChartDataEntry]) {
        print("‚û°Ô∏è StatisticsVC: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Legend Stack View...")
        legendStackView.arrangedSubviews.forEach { $0.removeFromSuperview() }
        for entry in data {
            // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ª–µ–≥–µ–Ω–¥—ã ---
            let legendItem = createLegendItem(color: entry.color, text: entry.category) // –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
            legendStackView.addArrangedSubview(legendItem)
        }
    }

    /// –°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ª–µ–≥–µ–Ω–¥—ã (—Ü–≤–µ—Ç–æ–≤–æ–π –∫–≤–∞–¥—Ä–∞—Ç + —Ç–µ–∫—Å—Ç).
    private func createLegendItem(color: UIColor, text: String) -> UIView {
        let container = UIStackView(); container.axis = .horizontal; container.spacing = 8; container.alignment = .center
        let colorView = UIView(); colorView.backgroundColor = color; colorView.translatesAutoresizingMaskIntoConstraints = false
        colorView.widthAnchor.constraint(equalToConstant: 16).isActive = true; colorView.heightAnchor.constraint(equalToConstant: 16).isActive = true; colorView.layer.cornerRadius = 4
        let label = UILabel(); label.text = text; label.font = .systemFont(ofSize: 15); label.textColor = .label
        container.addArrangedSubview(colorView); container.addArrangedSubview(label)
        return container
    }
}
